package com.example.probandocargandocontenidosdeunabd.ui.model
import androidx.lifecycle.LiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.probandocargandocontenidosdeunabd.db.NoteDataBase
import com.example.probandocargandocontenidosdeunabd.db.model.Note
import com.example.probandocargandocontenidosdeunabd.repository.NotesRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import android.app.Application
import androidx.compose.runtime.State
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.MutableLiveData
import com.example.probandocargandocontenidosdeunabd.core.TextFieldState
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.asSharedFlow
import java.util.Date
class NoteViewModel(application: Application): ViewModel() {
    private var _text = mutableStateOf(TextFieldState())
    var text: State<TextFieldState> = _text
    private var currentID: Int? = null
    private val coroutineScope = viewModelScope
    var openDialog by mutableStateOf(false)
    private val _eventFlow = MutableSharedFlow<Event>()
    val eventFlow = _eventFlow.asSharedFlow()
    private var _repository: NotesRepository? = null
    val repository: NotesRepository
        get() {
            if (_repository == null) {
                throw IllegalStateException("NotesRepository not initialized")
            }
            return _repository!!
        }
    var allNotes: LiveData<List<Note>>
           get() = repository.obtenerNotas()
    init {
        val db = NoteDataBase.getInstance(application)
        val dao = db.noteDao()
        _repository = NotesRepository(dao)

        allNotes = repository.obtenerNotas()
    }


    private fun load(id: Int?) {
        viewModelScope.launch {
                if (id != null) {
                repository.obtenerUserById(id).also {note ->
                    //le voy a indicar el id q va usar en este casso el id de la nota
                    currentID = note.id
                    //aca decimos q al valor del texto lo vaya guardando
                    _text.value = text.value.copy(
                        text =  note.text
                    )
                }
            } else {
                currentID = null
                _text.value = text.value.copy(
                    text = ""
                )
            }
        }
    }
    fun onEvent(event: Event) {
        when(event) {
            is Event.SetText ->{
                _text.value = text.value.copy(
                    text = event.text
                )
            }
            is Event.Save -> {
                viewModelScope.launch {
                    if (currentID != null) {
                    }else {
                        repository.crear(Note(
                            null,
                            text.value.text,
                            update = Date()))
                    }
                }
                openDialog = false
                coroutineScope.launch (Dispatchers.IO) {
                    _eventFlow.emit(Event.Save)
                }
            }
            is Event.OpenDialog -> {
                openDialog = true
            }
            is Event.CloseDialog -> {
                openDialog = false
            }
            is Event.Load -> {
                load(event.id)
                openDialog = true
            }
            is Event.Delete -> {
                viewModelScope.launch {
                    event.id?.let { repository.eliminar(it) }}}}}}